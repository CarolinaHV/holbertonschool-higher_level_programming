>>> len(__import__('2-matrix_divided').__doc__) > 10
True

>>> len(__import__('2-matrix_divided').matrix_divided.__doc__) > 10
True

===================================== PEP8 ==================================================

>>> import os
>>> os.popen('pep8 2-matrix_divided.py').read()
''


======================================= SUCCESS CASE TEST =======================================

>>> __import__('2-matrix_divided').matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


======================================= ERROR CASE TEST =========================================

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 2, 3], [4, 5, 6]], 'h')
... except TypeError as e: print(e)
...
div must be a number

>>> try: __import__('2-matrix_divided').matrix_divided([['a', 'b', 'c'], ['d', 'e', 'f']], 3)
... except TypeError as e: print(e)
...
matrix must be a matrix (list of lists) of integers/floats

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 'k', 3], [4, 5, 6]], 3)
... except TypeError as e: print(e)
...
matrix must be a matrix (list of lists) of integers/floats

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 2, 3], [4, 'j', 6]], 3)
... except TypeError as e: print(e)
...
matrix must be a matrix (list of lists) of integers/floats

>>> try: __import__('2-matrix_divided').matrix_divided([1, 2, 3], 3)
... except TypeError as e: print(e)
...
matrix must be a matrix (list of lists) of integers/floats

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 3)
... except TypeError as e: print(e)
...
Each row of the matrix must have the same size

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 2], [4, 5, 6]], 3)
... except TypeError as e: print(e)
...
Each row of the matrix must have the same size

>>> try: __import__('2-matrix_divided').matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
... except ZeroDivisionError as e: print(e)
...
division by zero
